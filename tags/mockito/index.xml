<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mockito on niels van eck</title><link>https://nielsvaneck.com/tags/mockito/</link><description>Recent content in mockito on niels van eck</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nielsvaneck.com/tags/mockito/index.xml" rel="self" type="application/rss+xml"/><item><title>Test-object builders for Stripe API resources</title><link>https://nielsvaneck.com/post/2020/2020-11-12-test-object-builders-for-stripe-api-resources/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>https://nielsvaneck.com/post/2020/2020-11-12-test-object-builders-for-stripe-api-resources/</guid><description>Working with the Stripe API is unlike most anything else in the world of software development. Stripe&amp;rsquo;s documentation is outstanding. Their API is intuitive and the language specific clients are easy to use. Each Stripe account comes with a test environment that makes development and integration testing effortless. The stripe command line tool can be used for simple API queries, setting up authentication and testing of web hooks. On top of all that, there is stripe-mock, a local service with a near- complete implementation of the API that can be used for testing and development without requiring a network connection to the Stripe Test environment.</description></item><item><title>Testing Python with Mockito</title><link>https://nielsvaneck.com/post/2020/2020-11-10-testing-python-with-mockito/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://nielsvaneck.com/post/2020/2020-11-10-testing-python-with-mockito/</guid><description>A significant percentage of writing software is invoking other bits of software that may or may not be in your control. That sounds straightforward, after all most of this code doesn&amp;rsquo;t even really &amp;ldquo;do&amp;rdquo; anything. But as with most things in life, mistakes are made and thus small bugs find their way into your code.
Testing is the obvious answer to this problem. Now before you climb your high horse and start pouring out the bucket of arguments on how good coders don&amp;rsquo;t need to write tests–and definitely not for simple code–, how testing takes too much time, that your boss won&amp;rsquo;t let you- or whatever other bad excuse (copied-from-some-Quora-answer-you-may-or-may-not-have-found-on-Google) you can bring up; here is why I think unit testing is valuable:</description></item></channel></rss>